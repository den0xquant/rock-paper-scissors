#!/usr/bin/env python3
# rps.py ‚Äî Rock/Paper/Scissors —Å FSM –∏ stdout-UI
from __future__ import annotations

import enum
import random
from dataclasses import dataclass, field
from typing import Callable, Dict, Optional, Tuple


# ===== –î–æ–º–µ–Ω—ã =====
class Move(enum.Enum):
    ROCK = "rock"
    PAPER = "paper"
    SCISSORS = "scissors"

    @staticmethod
    def from_input(s: str) -> Optional["Move"]:
        s = (s or "").strip().lower()
        if s in ("r", "rock", "–∫", "–∫–∞–º–µ–Ω—å"):
            return Move.ROCK
        if s in ("p", "paper", "–±", "–±—É–º–∞–≥–∞"):
            return Move.PAPER
        if s in ("s", "scissors", "–Ω", "–Ω–æ–∂–Ω–∏—Ü—ã"):
            return Move.SCISSORS
        return None



# ===== FSM =====
class State(enum.Enum):
    INIT = "INIT"
    MENU = "MENU"
    AWAIT_MOVE = "AWAIT_MOVE"
    SHOW_RESULT = "SHOW_RESULT"
    AWAIT_NEXT = "AWAIT_NEXT"
    GAME_OVER = "GAME_OVER"
    EXIT = "EXIT"


class Event(enum.Enum):
    START = "START"
    PLAY = "PLAY"
    SET_BEST_OF = "SET_BEST_OF"
    PLAYER_MOVE = "PLAYER_MOVE"
    RESOLVE = "RESOLVE"
    NEXT_ROUND = "NEXT_ROUND"
    END_GAME = "END_GAME"
    QUIT = "QUIT"


@dataclass
class GameConfig:
    best_of: int = 5
    def wins_needed(self) -> int:
        return self.best_of // 2 + 1


@dataclass
class GameContext:
    config: GameConfig = field(default_factory=GameConfig)
    player_score: int = 0
    cpu_score: int = 0
    round_idx: int = 0
    last_player_move: Optional[Move] = None
    last_cpu_move: Optional[Move] = None
    last_outcome: Optional[Outcome] = None

    def reset_match(self) -> None:
        self.player_score = 0
        self.cpu_score = 0
        self.round_idx = 0
        self.last_player_move = None
        self.last_cpu_move = None
        self.last_outcome = None


class FSM:
    def __init__(self, initial: State, context: GameContext):
        self.state: State = initial
        self.ctx: GameContext = context
        self._table: Dict[Tuple[State, Event], Callable[..., State]] = {}

    def on(self, state: State, event: Event):
        def decorator(fn: Callable[..., State]):
            self._table[(state, event)] = fn
            return fn
        return decorator

    def send(self, event: Event, **kwargs) -> None:
        handler = self._table.get((self.state, event))
        if not handler:
            # –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥ ‚Äî –ø—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º/–ø–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º
            print(f"[debug] –ù–µ—Ç –ø–µ—Ä–µ—Ö–æ–¥–∞: {self.state.value} --{event.value}--> ?")
            return
        self.state = handler(self, **kwargs)


# ===== UI helpers =====
def print_header(ctx: GameContext) -> None:
    print("\n" + "=" * 48)
    print("       ROCK ‚Ä¢ PAPER ‚Ä¢ SCISSORS".center(48))
    print("=" * 48)
    print(
        f"  –§–æ—Ä–º–∞—Ç: best-of {ctx.config.best_of} (–¥–æ {ctx.config.wins_needed()} –ø–æ–±–µ–¥)\n"
        f"  –°—á—ë—Ç: –í—ã {ctx.player_score} : {ctx.cpu_score} CPU | –†–∞—É–Ω–¥ #{ctx.round_idx}"
    )
    print("-" * 48)


def ask(prompt: str) -> str:
    try:
        return input(prompt)
    except (EOFError, KeyboardInterrupt):
        return "q"


def choose_best_of() -> Optional[int]:
    raw = ask("–í–≤–µ–¥–∏—Ç–µ –Ω–µ—á—ë—Ç–Ω–æ–µ —á–∏—Å–ª–æ —Ä–∞—É–Ω–¥–æ–≤ (–Ω–∞–ø—Ä. 3/5/7) –∏–ª–∏ 'm' –¥–ª—è –º–µ–Ω—é: ").strip().lower()
    if raw in ("m", "menu", "–º–µ–Ω—é"):
        return None
    try:
        n = int(raw)
        if n >= 1 and n % 2 == 1 and n <= 99:
            return n
        print("–ù—É–∂–Ω–æ –Ω–µ—á—ë—Ç–Ω–æ–µ —á–∏—Å–ª–æ 1..99. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ.")
        return choose_best_of()
    except ValueError:
        print("–≠—Ç–æ –Ω–µ —á–∏—Å–ª–æ. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ.")
        return choose_best_of()


def cpu_move() -> Move:
    return random.choice(list(Move))


def show_moves_and_result(ctx: GameContext) -> None:
    pm = ctx.last_player_move.value if ctx.last_player_move else "?"
    cm = ctx.last_cpu_move.value if ctx.last_cpu_move else "?"
    outcome = ctx.last_outcome.value if ctx.last_outcome else "?"
    print(f"\n–í—ã: {pm}  |  CPU: {cm}  ->  —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {outcome.upper()}")
    if ctx.last_outcome == Outcome.WIN:
        print("‚úÖ –í—ã –ø–æ–±–µ–¥–∏–ª–∏ —Ä–∞—É–Ω–¥!")
    elif ctx.last_outcome == Outcome.LOSE:
        print("‚ùå –†–∞—É–Ω–¥ –∑–∞ CPU.")
    else:
        print("‚ûñ –ù–∏—á—å—è.")


# ===== –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ / wiring =====
def build_app() -> FSM:
    ctx = GameContext()
    fsm = FSM(State.INIT, ctx)

    @fsm.on(State.INIT, Event.START)
    def init_start(self: FSM) -> State:
        print_header(self.ctx)
        return State.MENU

    @fsm.on(State.MENU, Event.PLAY)
    def menu_play(self: FSM) -> State:
        self.ctx.reset_match()
        print_header(self.ctx)
        print("–ù–∞—á–∏–Ω–∞–µ–º –º–∞—Ç—á! –í–≤–æ–¥–∏—Ç–µ —Ö–æ–¥: [r]ock / [p]aper / [s]cissors")
        print("–ö–æ–º–∞–Ω–¥—ã: [b] ‚Äî —Å–º–µ–Ω–∏—Ç—å best-of, [m] ‚Äî –º–µ–Ω—é, [q] ‚Äî –≤—ã—Ö–æ–¥")
        return State.AWAIT_MOVE

    @fsm.on(State.MENU, Event.SET_BEST_OF)
    def menu_set_best(self: FSM) -> State:
        val = choose_best_of()
        if val:
            self.ctx.config.best_of = val
            print(f"‚úî –§–æ—Ä–º–∞—Ç –æ–±–Ω–æ–≤–ª—ë–Ω: best-of {val}")
        print_header(self.ctx)
        return State.MENU

    @fsm.on(State.MENU, Event.QUIT)
    def menu_quit(self: FSM) -> State:
        print("–ü–æ–∫–∞! üëã")
        return State.EXIT

    @fsm.on(State.AWAIT_MOVE, Event.PLAYER_MOVE)
    def await_player_move(self: FSM, move: Move) -> State:
        self.ctx.last_player_move = move
        self.ctx.last_cpu_move = cpu_move()
        self.ctx.last_outcome = judge(move, self.ctx.last_cpu_move)
        if self.ctx.last_outcome == Outcome.WIN:
            self.ctx.player_score += 1
        elif self.ctx.last_outcome == Outcome.LOSE:
            self.ctx.cpu_score += 1
        self.ctx.round_idx += 1
        return State.SHOW_RESULT

    @fsm.on(State.AWAIT_MOVE, Event.SET_BEST_OF)
    def await_move_set_best(self: FSM) -> State:
        val = choose_best_of()
        if val:
            self.ctx.config.best_of = val
            print(f"‚úî –§–æ—Ä–º–∞—Ç –æ–±–Ω–æ–≤–ª—ë–Ω: best-of {val}")
            print("–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ç–µ–∫—É—â–∏–π –º–∞—Ç—á.")
        print_header(self.ctx)
        return State.AWAIT_MOVE

    @fsm.on(State.AWAIT_MOVE, Event.QUIT)
    def await_move_quit(self: FSM) -> State:
        print("–ü–æ–∫–∞! üëã")
        return State.EXIT

    @fsm.on(State.SHOW_RESULT, Event.RESOLVE)
    def show_result_resolve(self: FSM) -> State:
        print_header(self.ctx)
        show_moves_and_result(self.ctx)
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ü–∞ –º–∞—Ç—á–∞
        if self.ctx.player_score >= self.ctx.config.wins_needed() or \
           self.ctx.cpu_score >= self.ctx.config.wins_needed():
            return State.GAME_OVER
        return State.AWAIT_NEXT

    @fsm.on(State.AWAIT_NEXT, Event.NEXT_ROUND)
    def await_next_round(self: FSM) -> State:
        print_header(self.ctx)
        return State.AWAIT_MOVE

    @fsm.on(State.AWAIT_NEXT, Event.QUIT)
    def await_next_quit(self: FSM) -> State:
        print("–ü–æ–∫–∞! üëã")
        return State.EXIT

    @fsm.on(State.AWAIT_NEXT, Event.SET_BEST_OF)
    def await_next_set_best(self: FSM) -> State:
        val = choose_best_of()
        if val:
            self.ctx.config.best_of = val
            print(f"‚úî –§–æ—Ä–º–∞—Ç –æ–±–Ω–æ–≤–ª—ë–Ω: best-of {val}")
        print_header(self.ctx)
        return State.AWAIT_NEXT

    @fsm.on(State.GAME_OVER, Event.END_GAME)
    def game_over_end(self: FSM) -> State:
        print_header(self.ctx)
        if self.ctx.player_score > self.ctx.cpu_score:
            print("üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ –º–∞—Ç—á.")
        else:
            print("ü§ñ CPU –æ–∫–∞–∑–∞–ª—Å—è —Å–∏–ª—å–Ω–µ–µ –Ω–∞ —ç—Ç–æ—Ç —Ä–∞–∑.")
        print("\n–ù–∞–∂–º–∏—Ç–µ [p] ‚Äî —Å—ã–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞, [m] ‚Äî –º–µ–Ω—é, [q] ‚Äî –≤—ã—Ö–æ–¥.")
        while True:
            cmd = ask("> ").strip().lower()
            if cmd in ("p", "play", "—Å", "—Å—ã–≥—Ä–∞—Ç—å"):
                return State.MENU  # –∏–∑ –º–µ–Ω—é –ø–µ—Ä–µ–π–¥—ë–º –≤ PLAY
            if cmd in ("m", "menu", "–º–µ–Ω—é"):
                return State.MENU
            if cmd in ("q", "quit", "exit", "–≤", "–≤—ã—Ö–æ–¥"):
                return State.EXIT
            print("–ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞. –í—ã–±–µ—Ä–∏—Ç–µ p/m/q.")
    
    return fsm


def main() -> None:
    fsm = build_app()

    # –ó–∞–ø—É—Å–∫
    fsm.send(Event.START)

    while fsm.state != State.EXIT:
        if fsm.state == State.MENU:
            print("\n–ú–µ–Ω—é: [p] ‚Äî –∏–≥—Ä–∞—Ç—å, [b] ‚Äî –≤—ã–±—Ä–∞—Ç—å best-of, [q] ‚Äî –≤—ã—Ö–æ–¥")
            cmd = ask("> ").strip().lower()
            if cmd in ("p", "play", "–∏–≥—Ä–∞—Ç—å"):
                fsm.send(Event.PLAY)
            elif cmd in ("b", "best", "bestof"):
                fsm.send(Event.SET_BEST_OF)
            elif cmd in ("q", "quit", "exit", "–≤—ã—Ö–æ–¥"):
                fsm.send(Event.QUIT)
            else:
                print("–ù–µ –ø–æ–Ω—è–ª. –î–æ—Å—Ç—É–ø–Ω–æ: p/b/q.")

        elif fsm.state == State.AWAIT_MOVE:
            inp = ask("–•–æ–¥ [r/p/s], –∏–ª–∏ [b] ‚Äî —Ñ–æ—Ä–º–∞—Ç, [m] ‚Äî –º–µ–Ω—é, [q] ‚Äî –≤—ã—Ö–æ–¥: ").strip().lower()
            if inp in ("m", "menu", "–º–µ–Ω—é"):
                print_header(fsm.ctx)
                fsm.state = State.MENU
                continue
            if inp in ("b", "best", "bestof"):
                fsm.send(Event.SET_BEST_OF)
                continue
            if inp in ("q", "quit", "exit", "–≤—ã—Ö–æ–¥"):
                fsm.send(Event.QUIT)
                continue
            mv = Move.from_input(inp)
            if mv is None:
                print("–ù—É–∂–µ–Ω —Ö–æ–¥: r/p/s (rock/paper/scissors).")
                continue
            fsm.send(Event.PLAYER_MOVE, move=mv)

        elif fsm.state == State.SHOW_RESULT:
            fsm.send(Event.RESOLVE)

        elif fsm.state == State.AWAIT_NEXT:
            nxt = ask("Enter ‚Äî —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞—É–Ω–¥ | [m] ‚Äî –º–µ–Ω—é | [b] ‚Äî —Ñ–æ—Ä–º–∞—Ç | [q] ‚Äî –≤—ã—Ö–æ–¥: ")
            if nxt.strip() == "":
                fsm.send(Event.NEXT_ROUND)
            else:
                s = nxt.strip().lower()
                if s in ("m", "menu", "–º–µ–Ω—é"):
                    print_header(fsm.ctx)
                    fsm.state = State.MENU
                elif s in ("b", "best", "bestof"):
                    fsm.send(Event.SET_BEST_OF)
                elif s in ("q", "quit", "exit", "–≤—ã—Ö–æ–¥"):
                    fsm.send(Event.QUIT)
                else:
                    print("–ù–µ –ø–æ–Ω—è–ª. –ù–∞–∂–º–∏—Ç–µ Enter, –ª–∏–±–æ m/b/q.")

        elif fsm.state == State.GAME_OVER:
            fsm.send(Event.END_GAME)

    # State.EXIT ‚Äî –≤—ã—Ö–æ–¥–∏–º
    # (–ø—Ä–æ—â–∞–Ω–∏–µ —É–∂–µ –Ω–∞–ø–µ—á–∞—Ç–∞–Ω–æ –≤ —Ö–µ–Ω–¥–ª–µ—Ä–∞—Ö)


if __name__ == "__main__":
    main()
